<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context-3.2.xsd
               http://www.springframework.org/schema/tx
               http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
               http://www.springframework.org/schema/aop
               http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

    <!-- 配置spring的扫描器 (注册bean 自动注入) - spring注解，相当于xml配置中的bean id="". 将类注入到spring容器中 -->
    <!-- 业务层 @Service，控制层 @Controller，持久层 @Repository， 比较中立的类 @Component -->
    <context:component-scan base-package="com.aim.user.service" />

    <!-- 此行语句使得@resource @autowired 等四个注解可以使用 (自动装配bean)-->
    <context:annotation-config />


    <!-- 引入并加载jdbc配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <!-- 配置DBCP数据源(数据库连接池) --><!-- 还有一种是c3p0 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!-- Oracle数据库的驱动 -->
        <property name="driverClassName" value="${jdbc.driver}" />
        <!-- 数据库的URL -->
        <property name="url" value="${jdbc.url}" />
        <!-- 指定数据库的用户名 -->
        <property name="username" value="${jdbc.username}" />
        <!-- 指定数据库的密码 -->
        <property name="password" value="${jdbc.password}" />
        <!-- 指定数据库的最大连接数100 -->
        <property name="maxActive" value="20" />
        <!-- 指定数据库的最大空闲连接数30 -->
        <property name="maxIdle" value="5" />
        <!-- 指定数据库的最大等待数300 -->
        <property name="maxWait" value="300" />
        <!-- 指定数据库的默认自动提交 -->
        <property name="defaultAutoCommit" value="true" />
        <!-- 指定数据库的连接超时时是否启动自动回收 -->
        <property name="removeAbandoned" value="true" />
        <!-- 指定数据库的删除数据库连接的超时时长,数据库连接多久不用会被自动回收  -->
        <property name="removeAbandonedTimeout" value="60" />
        <property name="logAbandoned" value="true" />
    </bean>

    <!-- 整合mybatis，就是要得到sqlSessionFactory -->
    <!-- 配置mybatis的sqlSessionFactory，绑定DBCP -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:com/aim/*/mapper/*.xml" />
    </bean>

    <!-- 自动扫描映射层    扫描dao层，注入到IOC中与mapper关联    这里相当于dao层实现类-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.aim.*.mapper" />  <!--也可以换成下面的扫描注解方式-->
    </bean>
    <!-- 或者配置spring扫描器 扫描注解的dao层
    <context:component-scan base-package="com.aim.user.mapper" />
    -->

    <!-- 由spring管理mybatis的事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 事务的传播特性
        创建事务方法切面 也就是说哪些方法需要加入事务
        transaction-manager属性的值是上面我们创建的事务的id
     -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>




</beans>